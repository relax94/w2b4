{"version":3,"sources":["../../../jsnn/lib/index.js"],"names":["NeuronType","NONE","INPUT","HIDDEN","OUTPUT","LinkType","INPUT_TO_HIDDEN","HIDDEN_TO_HIDDEN","HIDDEN_TO_OUTPUT","Tools","x","Math","exp","random","toFixed","Neuron","type","key","value","bias","randomGenerator","sigmoidaFn","inputValue","fn","error","setBias","Link","neuronFromKey","neuronToKey","generateWeight","weight","delta","prevDeltaWeight","deltaWeight","NN","networkConfiguration","config","networkPreInit","createReferences","inputSize","layers","find","l","size","hiddenSize","outputSize","network","layer","createLayer","i","push","references","h","o","neuronType","linkType","print","filter","forEach","computeValue","r","reduce","prev","curr","getValue","derivativeFunc","n","derivativeFn","setError","computeHiddenErrors","hiddenNeuron","ref","newWeight","getWeight","setWeight","getError","trainInputs","trainAnswers","prevError","learnCycles","randomSet","computeNeuronsValue","computeGlobalError","adjustInputs","length","data","console","log","N","trainNetwork","run"],"mappings":"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","file":"index.js","sourcesContent":["export const NeuronType = {\r\n    NONE: \"NONE\",\r\n    INPUT: \"INPUT\",\r\n    HIDDEN: \"HIDDEN\",\r\n    OUTPUT: \"OUTPUT\"\r\n};\r\n\r\nexport const LinkType = {\r\n    NONE: \"NONE\",\r\n    INPUT_TO_HIDDEN: \"INPUT_TO_HIDDEN\",\r\n    HIDDEN_TO_HIDDEN: \"HIDDEN_TO_HIDDEN\",\r\n    HIDDEN_TO_OUTPUT: \"HIDDEN_TO_OUTPUT\"\r\n};\r\n\r\nexport class Tools {\r\n    static sigmoidaFn(x) {\r\n        return 1.0 / (1.0 + Math.exp(-x));\r\n    }\r\n\r\n    static derivativeFn(x) {\r\n        return x * (1 - x);\r\n    }\r\n\r\n    static randomGenerator() {\r\n        return +(Math.random() * (0.9 - 0) + 0).toFixed(4);\r\n    }\r\n}\r\nexport class Neuron {\r\n    constructor(type = NeuronType.NONE, key = -1) {\r\n        this.type = type;\r\n        this.value = 0.0;\r\n        this.key = key;\r\n        this.bias = Tools.randomGenerator();\r\n    }\r\n    fn(x) {\r\n        return Tools.sigmoidaFn(x);\r\n    }\r\n    computeValue(inputValue) {\r\n        this.value = this.fn(inputValue);\r\n    }\r\n    getValue() {\r\n        return this.value;\r\n    }\r\n    setValue(value) {\r\n        this.value = value;\r\n    }\r\n    setError(error) {\r\n        this.error = error;\r\n        this.setBias();\r\n    }\r\n    getError() {\r\n        return this.error;\r\n    }\r\n    setBias() {\r\n        this.bias += this.error;\r\n    }\r\n}\r\nexport class Link {\r\n    constructor(type = LinkType.NONE, neuronFromKey = -1, neuronToKey = -1) {\r\n        this.type = type;\r\n        this.neuronFromKey = neuronFromKey;\r\n        this.neuronToKey = neuronToKey;\r\n        this.generateWeight();\r\n    }\r\n\r\n    generateWeight() {\r\n        this.weight = Tools.randomGenerator();\r\n    }\r\n\r\n    setDeltaWeight(delta) {\r\n        this.prevDeltaWeight = this.deltaWeight;\r\n        this.deltaWeight = delta;\r\n    }\r\n\r\n    getDeltaWeight() {\r\n        return this.deltaWeight;\r\n    }\r\n\r\n    getPrevDeltaWeight() {\r\n        return this.prevDeltaWeight;\r\n    }\r\n\r\n    setWeight(weight) {\r\n        this.weight = weight;\r\n    }\r\n\r\n    getWeight() {\r\n        return this.weight;\r\n    }\r\n}\r\n\r\nexport class NN {\r\n    constructor(networkConfiguration) {\r\n        this.config = networkConfiguration;\r\n\r\n        this.networkPreInit();\r\n        this.createReferences();\r\n\r\n    }\r\n\r\n    networkPreInit() {\r\n        this.inputSize = this.config.layers.find(l => l.type === NeuronType.INPUT).size;\r\n        this.hiddenSize = this.config.layers.find(l => l.type === NeuronType.HIDDEN).size;\r\n        this.outputSize = this.config.layers.find(l => l.type === NeuronType.OUTPUT).size;\r\n\r\n        this.network = [];\r\n        for (let layer of this.config.layers)\r\n            this.createLayer(layer);\r\n    }\r\n\r\n    createLayer(layer) {\r\n        for (let i = 0; i < layer.size; i++)\r\n            this.network.push(new Neuron(layer.type, i));\r\n    }\r\n\r\n    createReferences() {\r\n        this.references = [];\r\n        for (let h = 0; h < this.hiddenSize; h++) {\r\n            for (let i = 0; i < this.inputSize; i++)\r\n                this.references.push(new Link(LinkType.INPUT_TO_HIDDEN, i, h));\r\n            for (let o = 0; o < this.outputSize; o++)\r\n                this.references.push(new Link(LinkType.HIDDEN_TO_OUTPUT, h, o));\r\n        }\r\n    }\r\n\r\n    computeNeuronsValue(neuronType, linkType, fn, print) {\r\n        return this.network.filter(h => h.type === neuronType).forEach((h) => {\r\n            h.computeValue(this.references.filter(r => r.type === linkType && r.neuronToKey === h.key)\r\n                    .reduce((prev, curr) => (prev + (curr.weight * fn(curr))), 0) + h.bias);\r\n            if (neuronType === NeuronType.OUTPUT)\r\n                if (print)\r\n                    print(h.getValue());\r\n        });\r\n    }\r\n\r\n    computeGlobalError(derivativeFunc) {\r\n        this.network.filter(n => n.type === NeuronType.OUTPUT).forEach((o) => {\r\n            this.error = Tools.derivativeFn(o.getValue()) * (derivativeFunc(o) - o.getValue());\r\n            o.setError(this.error);\r\n            this.computeHiddenErrors(o);\r\n        });\r\n    }\r\n\r\n    computeHiddenErrors(o) {\r\n        this.references.filter(r => r.type === LinkType.HIDDEN_TO_OUTPUT && r.neuronToKey === o.key).forEach(ref => {\r\n            let hiddenNeuron = this.network.find(n => n.type === NeuronType.HIDDEN && n.key === ref.neuronFromKey);\r\n            let newWeight = ref.getWeight() + (o.error * hiddenNeuron.value);\r\n            ref.setWeight(newWeight);\r\n            hiddenNeuron.setError(Tools.derivativeFn(hiddenNeuron.getValue()) * o.error * newWeight);\r\n        });\r\n    }\r\n\r\n    adjustInputs(derivativeFunc) {\r\n        this.network.filter(h => h.type === NeuronType.HIDDEN).forEach((h) => {\r\n            this.references.filter(r => r.type === LinkType.INPUT_TO_HIDDEN && r.neuronToKey === h.key).forEach(ref => {\r\n                let newWeight = ref.getWeight() + (h.getError() * derivativeFunc(ref));\r\n                ref.setWeight(newWeight);\r\n                h.setBias();\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n    trainNetwork(trainInputs, trainAnswers, fn) {\r\n        this.prevError = 2;\r\n        this.error = 1;\r\n        this.learnCycles = 0;\r\n        while (this.learnCycles < 100000) {\r\n            this.learnCycles++;\r\n            for (let randomSet = 0; randomSet < trainInputs.length; randomSet++) {\r\n                this.computeNeuronsValue(NeuronType.HIDDEN, LinkType.INPUT_TO_HIDDEN, (curr) => trainInputs[randomSet][curr.neuronFromKey]);\r\n                this.computeNeuronsValue(NeuronType.OUTPUT, LinkType.HIDDEN_TO_OUTPUT, (curr) => this.network.find(n => n.type === NeuronType.HIDDEN && n.key === curr.neuronFromKey).value);\r\n\r\n                this.computeGlobalError(o => trainAnswers[randomSet][o.key]);\r\n                this.adjustInputs((ref) => trainInputs[randomSet][ref.neuronFromKey]);\r\n            }\r\n            if (this.learnCycles === 100000)\r\n                return fn();\r\n        }\r\n    }\r\n\r\n    run(data) {\r\n\r\n        this.computeNeuronsValue(NeuronType.HIDDEN, LinkType.INPUT_TO_HIDDEN, (ref) => data[ref.neuronFromKey]);\r\n        this.computeNeuronsValue(NeuronType.OUTPUT, LinkType.HIDDEN_TO_OUTPUT, (curr) => this.network.find(n => n.type === NeuronType.HIDDEN && n.key === curr.neuronFromKey).value, (value) => {\r\n            console.log('OUT ', value);\r\n        });\r\n\r\n    }\r\n\r\n}\r\n\r\nconst N = new NN({\r\n    layers: [{\r\n        type: NeuronType.INPUT,\r\n        size: 15\r\n    },\r\n        {\r\n            type: NeuronType.HIDDEN,\r\n            size: 15\r\n        },\r\n        {\r\n            type: NeuronType.OUTPUT,\r\n            size: 10\r\n        }]\r\n});\r\n\r\n\r\nN.trainNetwork([\r\n    [0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], //1\r\n    [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], //2\r\n    [1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], //3\r\n    [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1], // 4\r\n    [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1],// 5\r\n    [1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1], //6\r\n    [1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0],// 7\r\n    [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1],// 8\r\n    [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1],// 9\r\n    [1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1],// 0\r\n], [\r\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1]\r\n], () => {\r\n    console.log('RESULTS : ');\r\n    N.run([1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1]);\r\n});\r\n"]}