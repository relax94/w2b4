{"version":3,"sources":["../../../../webs/lib/routes/nn.js"],"names":["derivativeFn","NeuronType","NONE","INPUT","HIDDEN","OUTPUT","LinkType","INPUT_TO_HIDDEN","HIDDEN_TO_HIDDEN","HIDDEN_TO_OUTPUT","x","Neuron","type","key","value","bias","Math","random","toFixed","exp","inputValue","fn","error","setBias","config","Link","neuronFromKey","neuronToKey","weight","delta","prevDeltaWeight","deltaWeight","NN","networkConfiguration","networkPreInit","createReferences","initCore","layers","layer","createLayer","inputSize","find","l","size","hiddenSize","outputSize","network","i","push","references","h","o","neuronType","linkType","print","filter","forEach","computeValue","r","reduce","prev","curr","getValue","derivativeFunc","n","setError","computeHiddenErrors","hiddenNeuron","ref","newWeight","getWeight","setWeight","getError","trainInputs","trainAnswers","console","log","prevError","learnCycles","cycles","randomSet","computeNeuronsValue","computeGlobalError","adjustInputs","length","data","outputFn","output","networkSaveConfig","configuration","JSON","stringify","networkStringConfiguration","err","path","content","deserializeObj","parse","map","c","fromConfig"],"mappings":"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","file":"nn.js","sourcesContent":["import {appendFile, readFile} from 'fs'\r\n\r\nexport const NeuronType = {\r\n    NONE: \"NONE\",\r\n    INPUT: \"INPUT\",\r\n    HIDDEN: \"HIDDEN\",\r\n    OUTPUT: \"OUTPUT\"\r\n};\r\n\r\nexport const LinkType = {\r\n    NONE: \"NONE\",\r\n    INPUT_TO_HIDDEN: \"INPUT_TO_HIDDEN\",\r\n    HIDDEN_TO_HIDDEN: \"HIDDEN_TO_HIDDEN\",\r\n    HIDDEN_TO_OUTPUT: \"HIDDEN_TO_OUTPUT\"\r\n};\r\n\r\nexport function derivativeFn(x) {\r\n    return x * (1 - x);\r\n}\r\n\r\nexport class Neuron {\r\n    constructor(type = NeuronType.NONE, key = -1, value = 0.0, bias) {\r\n        this.type = type;\r\n        this.value = value || 0.0;\r\n        this.key = key || 0;\r\n        this.bias = bias || +(Math.random() * (0.9 - 0) + 0).toFixed(4);\r\n    }\r\n\r\n    static fromConfig(config){\r\n        return new Neuron(config.type, config.value, config.key, config.bias);\r\n    }\r\n\r\n    fn(x) {\r\n        return 1.0 / (1.0 + Math.exp(-x));\r\n    }\r\n\r\n    computeValue(inputValue) {\r\n        this.value = this.fn(inputValue);\r\n    }\r\n\r\n    getValue() {\r\n        return this.value;\r\n    }\r\n\r\n    setValue(value) {\r\n        this.value = value;\r\n    }\r\n\r\n    setError(error) {\r\n        this.error = error;\r\n        this.setBias();\r\n    }\r\n\r\n    getError() {\r\n        return this.error;\r\n    }\r\n\r\n    setBias() {\r\n        this.bias += this.error;\r\n    }\r\n}\r\n\r\nexport class Link {\r\n    constructor(type = LinkType.NONE, neuronFromKey = -1, neuronToKey = -1, weight = 0.0) {\r\n        this.type = type;\r\n        this.neuronFromKey = neuronFromKey;\r\n        this.neuronToKey = neuronToKey;\r\n        this.weight = weight || +(Math.random() * (0.9 - 0) + 0).toFixed(4);\r\n    }\r\n\r\n    static fromConfig(config){\r\n        return new Link(config.type, config.neuronFromKey, config.neuronToKey, config.weight);\r\n    }\r\n\r\n    generateWeight() {\r\n        this.weight = +(Math.random() * (0.9 - 0) + 0).toFixed(4);\r\n    }\r\n\r\n    setDeltaWeight(delta) {\r\n        this.prevDeltaWeight = this.deltaWeight;\r\n        this.deltaWeight = delta;\r\n    }\r\n\r\n    getDeltaWeight() {\r\n        return this.deltaWeight;\r\n    }\r\n\r\n    getPrevDeltaWeight() {\r\n        return this.prevDeltaWeight;\r\n    }\r\n\r\n    setWeight(weight) {\r\n        this.weight = weight;\r\n    }\r\n\r\n    getWeight() {\r\n        return this.weight;\r\n    }\r\n}\r\n\r\nexport class NN {\r\n    constructor(networkConfiguration) {\r\n        this.config = networkConfiguration;\r\n\r\n        this.networkPreInit();\r\n        this.createReferences();\r\n\r\n    }\r\n\r\n    networkPreInit() {\r\n        this.initCore();\r\n        for (let layer of this.config.layers)\r\n            this.createLayer(layer);\r\n    }\r\n\r\n    initCore(){\r\n        this.inputSize = this.config.layers.find(l => l.type === NeuronType.INPUT).size;\r\n        this.hiddenSize = this.config.layers.find(l => l.type === NeuronType.HIDDEN).size;\r\n        this.outputSize = this.config.layers.find(l => l.type === NeuronType.OUTPUT).size;\r\n\r\n        this.network = [];\r\n    }\r\n\r\n    createLayer(layer) {\r\n        for (let i = 0; i < layer.size; i++)\r\n            this.network.push(new Neuron(layer.type, i));\r\n    }\r\n\r\n    createReferences() {\r\n        this.references = [];\r\n\r\n        for (let h = 0; h < this.hiddenSize; h++) {\r\n\r\n            for (let i = 0; i < this.inputSize; i++)\r\n                this.references.push(new Link(LinkType.INPUT_TO_HIDDEN, i, h));\r\n\r\n            for (let o = 0; o < this.outputSize; o++)\r\n                this.references.push(new Link(LinkType.HIDDEN_TO_OUTPUT, h, o));\r\n        }\r\n    }\r\n\r\n    computeNeuronsValue(neuronType, linkType, fn, print) {\r\n        return this.network.filter(h => h.type === neuronType).forEach((h) => {\r\n            h.computeValue(this.references.filter(r => r.type === linkType && r.neuronToKey === h.key)\r\n                    .reduce((prev, curr) => (prev + (curr.weight * fn(curr))), 0) + h.bias);\r\n\r\n            if (neuronType === NeuronType.OUTPUT)\r\n                if (print)\r\n                    print(h.getValue());\r\n            //this.outputValue = h.getValue();\r\n        });\r\n    }\r\n\r\n\r\n    computeGlobalError(derivativeFunc) {\r\n        this.network.filter(n => n.type === NeuronType.OUTPUT).forEach((o) => {\r\n            this.error = derivativeFn(o.getValue()) * (derivativeFunc(o) - o.getValue());\r\n            o.setError(this.error);\r\n            this.computeHiddenErrors(o);\r\n        });\r\n    }\r\n\r\n    computeHiddenErrors(o) {\r\n        this.references.filter(r => r.type === LinkType.HIDDEN_TO_OUTPUT && r.neuronToKey === o.key).forEach(ref => {\r\n            let hiddenNeuron = this.network.find(n => n.type === NeuronType.HIDDEN && n.key === ref.neuronFromKey);\r\n            let newWeight = ref.getWeight() + (o.error * hiddenNeuron.value);\r\n            ref.setWeight(newWeight);\r\n            hiddenNeuron.setError(derivativeFn(hiddenNeuron.getValue()) * o.error * newWeight);\r\n        });\r\n    }\r\n\r\n    adjustInputs(derivativeFunc) {\r\n        this.network.filter(h => h.type === NeuronType.HIDDEN).forEach((h) => {\r\n            this.references.filter(r => r.type === LinkType.INPUT_TO_HIDDEN && r.neuronToKey === h.key).forEach(ref => {\r\n                let newWeight = ref.getWeight() + (h.getError() * derivativeFunc(ref));\r\n                ref.setWeight(newWeight);\r\n                h.setBias();\r\n            });\r\n        });\r\n    }\r\n\r\n    trainNetwork(trainInputs, trainAnswers, fn) {\r\n        console.log('TRAIN START');\r\n        this.prevError = 2;\r\n        this.error = 1;\r\n\r\n        this.learnCycles = 0;\r\n\r\n        while (this.learnCycles < this.config.cycles) {\r\n\r\n            this.learnCycles++;\r\n            for (let randomSet = 0; randomSet < trainInputs.length; randomSet++) {\r\n\r\n                this.computeNeuronsValue(NeuronType.HIDDEN, LinkType.INPUT_TO_HIDDEN, (curr) => trainInputs[randomSet][curr.neuronFromKey]);\r\n                this.computeNeuronsValue(NeuronType.OUTPUT, LinkType.HIDDEN_TO_OUTPUT, (curr) => this.network.find(n => n.type === NeuronType.HIDDEN && n.key === curr.neuronFromKey).value);\r\n\r\n                this.computeGlobalError(o => trainAnswers[randomSet][o.key]);\r\n                this.adjustInputs((ref) => trainInputs[randomSet][ref.neuronFromKey]);\r\n            }\r\n\r\n            if (this.learnCycles === this.config.cycles)\r\n                return fn();\r\n\r\n            if (this.learnCycles % 1000 === 0)\r\n                console.log('LEARN CYCLES ', this.learnCycles);\r\n        }\r\n\r\n    }\r\n\r\n    run(data, outputFn) {\r\n        let output = [];\r\n        this.computeNeuronsValue(NeuronType.HIDDEN, LinkType.INPUT_TO_HIDDEN, (ref) => data[ref.neuronFromKey]);\r\n        this.computeNeuronsValue(NeuronType.OUTPUT, LinkType.HIDDEN_TO_OUTPUT, (curr) => this.network.find(n => n.type === NeuronType.HIDDEN && n.key === curr.neuronFromKey).value, (value) => {\r\n\r\n            output.push(value);\r\n            if (output.length === this.outputSize)\r\n                outputFn(output);\r\n            // console.log('OUT ', value);\r\n        });\r\n    }\r\n\r\n    networkStringConfiguration() {\r\n        const networkSaveConfig = {\r\n            configuration: this.config,\r\n            network: this.network,\r\n            references: this.references,\r\n            learnCycles: this.learnCycles\r\n        };\r\n\r\n        return JSON.stringify(networkSaveConfig);\r\n    }\r\n\r\n    serializeToFile() {\r\n        appendFile(\"d://network.txt\", this.networkStringConfiguration(), (err) => {\r\n            console.log('append err ', err);\r\n        });\r\n    }\r\n\r\n    deserializeFromFile(path) {\r\n        readFile(path, \"utf8\", (err, content) => {\r\n            if (!err) {\r\n                this.deserializeObj = JSON.parse(content);\r\n                this.config = this.deserializeObj.configuration;\r\n                this.network = this.deserializeObj.network.map((c) => Neuron.fromConfig(c));\r\n                this.references = this.deserializeObj.references.map((c) => Link.fromConfig(c));\r\n                this.learnCycles = this.deserializeObj.learnCycles;\r\n\r\n                console.log('SUCCESS DESEREALIZING', this.learnCycles);\r\n            }\r\n            else\r\n                console.log('FAILED DESERIALIZE NETWORK FILE');\r\n        });\r\n    }\r\n}\r\n\r\n"]}