{"version":3,"sources":["../../../../webs/lib/routes/NetworkRoutes.js"],"names":["N","cycles","layers","type","INPUT","size","HIDDEN","OUTPUT","trainNetwork","console","log","serializeToFile","PostImageData","config","cors","origin","additionalHeaders","method","path","handler","req","reply","k","payload","run","output"],"mappings":";;;;;;;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAMA,IAAI,WAAO;AACbC,YAAQ,KADK;AAEbC,YAAQ,CAAC;AACLC,cAAM,eAAWC,KADZ;AAELC,cAAM;AAFD,KAAD,EAIR;AACIF,cAAM,eAAWG,MADrB;AAEID,cAAM;AAFV,KAJQ,EAQR;AACIF,cAAM,eAAWI,MADrB;AAEIF,cAAM;AAFV,KARQ;AAFK,CAAP,CAAV;;AAgBA;;AAjCA;AAmCAL,EAAEQ,YAAF,CAAe,CACX,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,CADW,EACmC;AAC9C,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,CAFW,EAEoC;AAC/C,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,CAHW,EAGoC;AAC/C,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,CAJW,EAIoC;AAC/C,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,CALW,EAKoC;AAC/C,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,CANW,EAMmC;AAC9C,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,CAPW,EAOoC;AAC/C,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,CARW,EAQmC;AAC9C,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,CATW,EASmC;AAC9C,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,CAVW,CAUkC;AAVlC,CAAf,EAWG,CACC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,CADD,EAEC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,CAFD,EAGC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,CAHD,EAIC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,CAJD,EAKC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,CALD,EAMC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,CAND,EAOC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,CAPD,EAQC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,CARD,EASC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,CATD,EAUC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,CAVD,CAXH,EAsBM,YAAM;AACJC,YAAQC,GAAR,CAAY,eAAZ;AACAV,MAAEW,eAAF;AACA;AACH,CA1BL;;AA8BO,IAAIC,wCAAgB;AACvBC,YAAQ;AACJC,cAAM;AACFC,oBAAQ,CAAC,GAAD,CADN;AAEFC,+BAAmB,CAAC,eAAD,EAAkB,kBAAlB;AAFjB;AADF,KADe;AAOvBC,YAAQ,MAPe;AAQvBC,UAAM,sBARiB;AASvBC,aAAS,iBAACC,GAAD,EAAMC,KAAN,EAAgB;AACrB,aAAK,IAAIC,CAAT,IAAcF,IAAIG,OAAlB;AACIvB,cAAEwB,GAAF,CAAMJ,IAAIG,OAAJ,CAAYD,CAAZ,CAAN,EAAsB,UAAUG,MAAV,EAAkB;AACpC,uBAAOJ,MAAMI,MAAN,CAAP;AACH,aAFD;AADJ;AAIH;AAdsB,CAApB","file":"NetworkRoutes.js","sourcesContent":["// import { NetworkManager } from '../db/managers/NetworkManager'\r\nimport { NN, NeuronType } from './nn'\r\n\r\n// const NM = new NetworkManager();\r\n\r\n// export let CreateNetworkRoute = {\r\n//     method: 'POST',\r\n//     path: '/network/create',\r\n//     handler: (req, reply) => {\r\n//         NM.createNetwork(req.payload, (response) => {\r\n//             return reply(response);\r\n//         });\r\n//         return reply({ success: false });\r\n//     }\r\n// };\r\n\r\n\r\nconst N = new NN({\r\n    cycles: 10000,\r\n    layers: [{\r\n        type: NeuronType.INPUT,\r\n        size: 15\r\n    },\r\n    {\r\n        type: NeuronType.HIDDEN,\r\n        size: 15\r\n    },\r\n    {\r\n        type: NeuronType.OUTPUT,\r\n        size: 10\r\n    }]\r\n});\r\n\r\n//N.deserializeFromFile(\"d://network.txt\");\r\n\r\nN.trainNetwork([\r\n    [1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1],// 0\r\n    [0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], //1\r\n    [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], //2\r\n    [1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], //3\r\n    [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1], // 4\r\n    [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1],// 5\r\n    [1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], //6\r\n    [1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0],// 7\r\n    [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1],// 8\r\n    [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1]// 9\r\n], [\r\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1]\r\n   ], () => {\r\n        console.log('TRAIN SUCCESS');\r\n        N.serializeToFile();\r\n        // N.run([1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1]);\r\n    });\r\n\r\n\r\n\r\nexport let PostImageData = {\r\n    config: {\r\n        cors: {\r\n            origin: ['*'],\r\n            additionalHeaders: ['cache-control', 'x-requested-with']\r\n        }\r\n    },\r\n    method: 'POST',\r\n    path: '/network/games/image',\r\n    handler: (req, reply) => {\r\n        for (let k in req.payload)\r\n            N.run(req.payload[k], function (output) {\r\n                return reply(output);\r\n            });\r\n    }\r\n};"]}