{"version":3,"sources":["../../../../webs/lib/routes/NetworkRoutes.js"],"names":["N","cycles","layers","type","INPUT","size","HIDDEN","OUTPUT","numConverter","trainNetwork","console","log","run","output","trainSet","PostImageData","config","cors","origin","additionalHeaders","method","path","handler","req","reply","k","payload","TrainNetwork","set","JSON","parse"],"mappings":"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","file":"NetworkRoutes.js","sourcesContent":["// import { NetworkManager } from '../db/managers/NetworkManager'\r\nimport {NN, NeuronType} from './nn'\r\n\r\n// const NM = new NetworkManager();\r\n\r\n// export let CreateNetworkRoute = {\r\n//     method: 'POST',\r\n//     path: '/network/create',\r\n//     handler: (req, reply) => {\r\n//         NM.createNetwork(req.payload, (response) => {\r\n//             return reply(response);\r\n//         });\r\n//         return reply({ success: false });\r\n//     }\r\n// };\r\n\r\n\r\nconst N = new NN({\r\n    cycles: 1000,\r\n    layers: [{\r\n        type: NeuronType.INPUT,\r\n        size: 15\r\n    },\r\n        {\r\n            type: NeuronType.HIDDEN,\r\n            size: 15\r\n        },\r\n        {\r\n            type: NeuronType.OUTPUT,\r\n            size: 10\r\n        }]\r\n});\r\n\r\n//N.deserializeFromFile(\"d://network.txt\");\r\n\r\n\r\nvar numConverter = [\r\n    [255, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 255, 0, 0, 0, 0, 0, 0, 0, 0]\r\n   /* [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1]*/\r\n   ];\r\n\r\nN.trainNetwork([\r\n    [128, 122, 122, 157, 0, 173, 255, 0, 235, 1, 0, 0, 0, 95, 0],\r\n   [0, 179, 200, 101, 0, 204, 0, 0, 54, 0, 0, 51, 0, 0, 33]\r\n   /*[1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], //2\r\n     [1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], //3\r\n     [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1], // 4\r\n     [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1],// 5\r\n     [1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], //6\r\n     [1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0],// 7\r\n     [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1],// 8\r\n     [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1]// 9*/\r\n], numConverter, () => {\r\n    console.log('TRAIN SUCCESS');\r\n    //  N.serializeToFile();\r\n    N.run([0, 179, 200, 101, 0, 204, 0, 0, 54, 0, 0, 51, 0, 0, 33], function (output) {\r\n        console.log('OOOO ', output);\r\n    });\r\n});\r\n\r\n\r\nvar trainSet = [];\r\n\r\nexport let PostImageData = {\r\n    config: {\r\n        cors: {\r\n            origin: ['*'],\r\n            additionalHeaders: ['cache-control', 'x-requested-with']\r\n        }\r\n    },\r\n    method: 'POST',\r\n    path: '/network/games/image',\r\n    handler: (req, reply) => {\r\n        for (let k in req.payload)\r\n            N.run(req.payload[k], function (output) {\r\n                return reply(output);\r\n            });\r\n    }\r\n};\r\n\r\nexport let TrainNetwork = {\r\n    config: {\r\n        cors: {\r\n            origin: ['*'],\r\n            additionalHeaders: ['cache-control', 'x-requested-with']\r\n        }\r\n /*         payload: {\r\n             output: 'data',\r\n             parse: true,\r\n             allow: 'application/json'\r\n          }*/\r\n    },\r\n    method: 'POST',\r\n    path: '/network/games/train',\r\n    handler: (req, reply) => {\r\n        trainSet = req.payload.set;\r\n        console.log('train payload', );\r\n\r\n       N.trainNetwork(JSON.parse(trainSet), numConverter, () => {\r\n            console.log('TRAIN SUCCESS');\r\n            //  N.serializeToFile();\r\n           /* N.run([0, 179, 200, 101, 0, 204, 0, 0, 54, 0, 0, 51, 0, 0, 33], function (output) {\r\n                console.log('OOOO ', output);\r\n            });*/\r\n        });\r\n\r\n        reply();\r\n    }\r\n};"]}